apply plugin: 'com.android.library'

android {
  compileSdkVersion 33

  defaultConfig {
    minSdkVersion 16
    targetSdkVersion 33
    versionCode 1
    versionName "1.0"
    vectorDrawables.useSupportLibrary = true
    ndk {
      moduleName "photoprocessing"
    }
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  sourceSets.main {
    jni.srcDirs = []
    jniLibs.srcDir 'src/main/libs'
  }
  task ndkBuild(type: Exec, description: 'run ndk-build') {
//    commandLine project.android.ndkDirectory.absolutePath + '/ndk-build', '-C', file('src/main/jni/').absolutePath
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
      workingDir 'src/main/jni'

      commandLine project.android.ndkDirectory.absolutePath+'/ndk-build.cmd', '-j', Runtime.runtime.availableProcessors()
    } else {
//      workingDir 'src/main/jni'
      commandLine project.android.ndkDirectory.absolutePath + '/ndk-build', '-C', file('src/main/jni/').absolutePath
//      commandLine getNdkDir()+"/ndk-build", '-j', Runtime.runtime.availableProcessors()
    }
  }
  tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(ndkBuild)
  }

  /*task cleanNative(type: Exec) {
    workingDir file('src/main')
    commandLine getNdkBuildCmd(), 'clean'
  }

  clean.dependsOn cleanNative*/

}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  testImplementation 'junit:junit:4.12'
  testImplementation "org.robolectric:robolectric:3.3.2"
  implementation 'com.google.android.material:material:1.0.0'
  implementation 'androidx.appcompat:appcompat:1.0.0'
  api 'com.github.bumptech.glide:glide:4.12.0'
  implementation 'androidx.recyclerview:recyclerview:1.0.0'

  androidTestImplementation 'androidx.test.ext:junit:1.1.1'

}
def getNdkDir() {
  if (System.env.ANDROID_NDK_ROOT != null)
    return System.env.ANDROID_NDK_ROOT

  Properties properties = new Properties()
  properties.load(project.rootProject.file('local.properties').newDataInputStream())
  def ndkdir = properties.getProperty('ndk.dir', null)
  if (ndkdir == null)
    throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

  return ndkdir
}
import org.apache.tools.ant.taskdefs.condition.Os
/*def getNdkBuildCmd() {
  def ndkbuild = getNdkDir() + "/ndk-build"
  if (Os.isFamily(Os.FAMILY_WINDOWS))
    ndkbuild += ".cmd"

  return ndkbuild
}*/
