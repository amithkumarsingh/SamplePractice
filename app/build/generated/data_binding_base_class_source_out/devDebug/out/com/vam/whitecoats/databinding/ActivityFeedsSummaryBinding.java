// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import androidx.viewpager.widget.ViewPager;
import com.google.android.material.tabs.TabLayout;
import com.vam.whitecoats.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityFeedsSummaryBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ViewPager contentPager;

  @NonNull
  public final TabLayout dots;

  @NonNull
  public final RelativeLayout feedDocereeAdLayout;

  @NonNull
  public final LinearLayout linearLayout4;

  private ActivityFeedsSummaryBinding(@NonNull RelativeLayout rootView,
      @NonNull ViewPager contentPager, @NonNull TabLayout dots,
      @NonNull RelativeLayout feedDocereeAdLayout, @NonNull LinearLayout linearLayout4) {
    this.rootView = rootView;
    this.contentPager = contentPager;
    this.dots = dots;
    this.feedDocereeAdLayout = feedDocereeAdLayout;
    this.linearLayout4 = linearLayout4;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityFeedsSummaryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityFeedsSummaryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_feeds_summary, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityFeedsSummaryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.content_pager;
      ViewPager contentPager = ViewBindings.findChildViewById(rootView, id);
      if (contentPager == null) {
        break missingId;
      }

      id = R.id.dots;
      TabLayout dots = ViewBindings.findChildViewById(rootView, id);
      if (dots == null) {
        break missingId;
      }

      id = R.id.feed_doceree_ad_layout;
      RelativeLayout feedDocereeAdLayout = ViewBindings.findChildViewById(rootView, id);
      if (feedDocereeAdLayout == null) {
        break missingId;
      }

      id = R.id.linearLayout4;
      LinearLayout linearLayout4 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout4 == null) {
        break missingId;
      }

      return new ActivityFeedsSummaryBinding((RelativeLayout) rootView, contentPager, dots,
          feedDocereeAdLayout, linearLayout4);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
