// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vam.whitecoats.R;
import com.vam.whitecoats.ui.customviews.RoundedImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FeedsLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RelativeLayout blank;

  @NonNull
  public final RelativeLayout blank1;

  @NonNull
  public final LinearLayout bookmarkTimelineCommunity;

  @NonNull
  public final ImageView bookmarkTimelineCommunityImageView;

  @NonNull
  public final LinearLayout bookmarkTimelineContent;

  @NonNull
  public final ImageView bookmarkTimelineContentImageView;

  @NonNull
  public final LinearLayout bookmarkTimelineContentReportToSpam;

  @NonNull
  public final ImageView bookmarkTimelineContentReportToSpamImageView;

  @NonNull
  public final LinearLayout communityAttachmentLayoutTimeline;

  @NonNull
  public final RelativeLayout contentImageLayout;

  @NonNull
  public final RoundedImageView createdDocPicture;

  @NonNull
  public final LinearLayout createdbyLayoutTimeline;

  @NonNull
  public final TextView edited;

  @NonNull
  public final TextView editedContent;

  @NonNull
  public final LinearLayout feedsLayout;

  @NonNull
  public final Button ifInterestedButton;

  @NonNull
  public final Button ifInterestedButtonArticle;

  @NonNull
  public final TextView labelAttachmentNameTimeline;

  @NonNull
  public final TextView labelAttachmentSizeTimeline;

  @NonNull
  public final LinearLayout messageContainer;

  @NonNull
  public final LinearLayout messageContainer1;

  @NonNull
  public final TextView postCreatedBy;

  @NonNull
  public final TextView postTypeArticle;

  @NonNull
  public final TextView postTypeCommunity;

  @NonNull
  public final LinearLayout postTypeDateLayCommunity;

  @NonNull
  public final LinearLayout postTypeDateLayContent;

  @NonNull
  public final LinearLayout surveyRootLayout;

  @NonNull
  public final LinearLayout timeLineReportToSpam;

  @NonNull
  public final ImageView timeLineReportToSpamImageView;

  @NonNull
  public final LatestCommentViewgroupBinding timelineCommentViewgroup;

  @NonNull
  public final TextView tvCommunityDescpfeedsArticle;

  @NonNull
  public final TextView tvCommunityPublishedDate;

  @NonNull
  public final TextView tvFeedsDescp;

  @NonNull
  public final TextView tvFeedsTitle;

  @NonNull
  public final TextView tvForContentDesc;

  @NonNull
  public final TextView tvForContentSpeciality;

  @NonNull
  public final TextView tvForContentTitle;

  @NonNull
  public final ImageView webinarIcon;

  @NonNull
  public final RelativeLayout webinarLayTimeLine;

  @NonNull
  public final TextView webinarStatus;

  @NonNull
  public final TextView webinarText;

  @NonNull
  public final RelativeLayout webinarTimeDateLayFullview;

  private FeedsLayoutBinding(@NonNull LinearLayout rootView, @NonNull RelativeLayout blank,
      @NonNull RelativeLayout blank1, @NonNull LinearLayout bookmarkTimelineCommunity,
      @NonNull ImageView bookmarkTimelineCommunityImageView,
      @NonNull LinearLayout bookmarkTimelineContent,
      @NonNull ImageView bookmarkTimelineContentImageView,
      @NonNull LinearLayout bookmarkTimelineContentReportToSpam,
      @NonNull ImageView bookmarkTimelineContentReportToSpamImageView,
      @NonNull LinearLayout communityAttachmentLayoutTimeline,
      @NonNull RelativeLayout contentImageLayout, @NonNull RoundedImageView createdDocPicture,
      @NonNull LinearLayout createdbyLayoutTimeline, @NonNull TextView edited,
      @NonNull TextView editedContent, @NonNull LinearLayout feedsLayout,
      @NonNull Button ifInterestedButton, @NonNull Button ifInterestedButtonArticle,
      @NonNull TextView labelAttachmentNameTimeline, @NonNull TextView labelAttachmentSizeTimeline,
      @NonNull LinearLayout messageContainer, @NonNull LinearLayout messageContainer1,
      @NonNull TextView postCreatedBy, @NonNull TextView postTypeArticle,
      @NonNull TextView postTypeCommunity, @NonNull LinearLayout postTypeDateLayCommunity,
      @NonNull LinearLayout postTypeDateLayContent, @NonNull LinearLayout surveyRootLayout,
      @NonNull LinearLayout timeLineReportToSpam, @NonNull ImageView timeLineReportToSpamImageView,
      @NonNull LatestCommentViewgroupBinding timelineCommentViewgroup,
      @NonNull TextView tvCommunityDescpfeedsArticle, @NonNull TextView tvCommunityPublishedDate,
      @NonNull TextView tvFeedsDescp, @NonNull TextView tvFeedsTitle,
      @NonNull TextView tvForContentDesc, @NonNull TextView tvForContentSpeciality,
      @NonNull TextView tvForContentTitle, @NonNull ImageView webinarIcon,
      @NonNull RelativeLayout webinarLayTimeLine, @NonNull TextView webinarStatus,
      @NonNull TextView webinarText, @NonNull RelativeLayout webinarTimeDateLayFullview) {
    this.rootView = rootView;
    this.blank = blank;
    this.blank1 = blank1;
    this.bookmarkTimelineCommunity = bookmarkTimelineCommunity;
    this.bookmarkTimelineCommunityImageView = bookmarkTimelineCommunityImageView;
    this.bookmarkTimelineContent = bookmarkTimelineContent;
    this.bookmarkTimelineContentImageView = bookmarkTimelineContentImageView;
    this.bookmarkTimelineContentReportToSpam = bookmarkTimelineContentReportToSpam;
    this.bookmarkTimelineContentReportToSpamImageView = bookmarkTimelineContentReportToSpamImageView;
    this.communityAttachmentLayoutTimeline = communityAttachmentLayoutTimeline;
    this.contentImageLayout = contentImageLayout;
    this.createdDocPicture = createdDocPicture;
    this.createdbyLayoutTimeline = createdbyLayoutTimeline;
    this.edited = edited;
    this.editedContent = editedContent;
    this.feedsLayout = feedsLayout;
    this.ifInterestedButton = ifInterestedButton;
    this.ifInterestedButtonArticle = ifInterestedButtonArticle;
    this.labelAttachmentNameTimeline = labelAttachmentNameTimeline;
    this.labelAttachmentSizeTimeline = labelAttachmentSizeTimeline;
    this.messageContainer = messageContainer;
    this.messageContainer1 = messageContainer1;
    this.postCreatedBy = postCreatedBy;
    this.postTypeArticle = postTypeArticle;
    this.postTypeCommunity = postTypeCommunity;
    this.postTypeDateLayCommunity = postTypeDateLayCommunity;
    this.postTypeDateLayContent = postTypeDateLayContent;
    this.surveyRootLayout = surveyRootLayout;
    this.timeLineReportToSpam = timeLineReportToSpam;
    this.timeLineReportToSpamImageView = timeLineReportToSpamImageView;
    this.timelineCommentViewgroup = timelineCommentViewgroup;
    this.tvCommunityDescpfeedsArticle = tvCommunityDescpfeedsArticle;
    this.tvCommunityPublishedDate = tvCommunityPublishedDate;
    this.tvFeedsDescp = tvFeedsDescp;
    this.tvFeedsTitle = tvFeedsTitle;
    this.tvForContentDesc = tvForContentDesc;
    this.tvForContentSpeciality = tvForContentSpeciality;
    this.tvForContentTitle = tvForContentTitle;
    this.webinarIcon = webinarIcon;
    this.webinarLayTimeLine = webinarLayTimeLine;
    this.webinarStatus = webinarStatus;
    this.webinarText = webinarText;
    this.webinarTimeDateLayFullview = webinarTimeDateLayFullview;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FeedsLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FeedsLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.feeds_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FeedsLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.blank;
      RelativeLayout blank = ViewBindings.findChildViewById(rootView, id);
      if (blank == null) {
        break missingId;
      }

      id = R.id.blank1;
      RelativeLayout blank1 = ViewBindings.findChildViewById(rootView, id);
      if (blank1 == null) {
        break missingId;
      }

      id = R.id.bookmark_timeline_community;
      LinearLayout bookmarkTimelineCommunity = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkTimelineCommunity == null) {
        break missingId;
      }

      id = R.id.bookmark_timeline_community_ImageView;
      ImageView bookmarkTimelineCommunityImageView = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkTimelineCommunityImageView == null) {
        break missingId;
      }

      id = R.id.bookmark_timeline_content;
      LinearLayout bookmarkTimelineContent = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkTimelineContent == null) {
        break missingId;
      }

      id = R.id.bookmark_timeline_content_ImageView;
      ImageView bookmarkTimelineContentImageView = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkTimelineContentImageView == null) {
        break missingId;
      }

      id = R.id.bookmark_timeline_content_report_to_spam;
      LinearLayout bookmarkTimelineContentReportToSpam = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkTimelineContentReportToSpam == null) {
        break missingId;
      }

      id = R.id.bookmark_timeline_content_report_to_spam_ImageView;
      ImageView bookmarkTimelineContentReportToSpamImageView = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkTimelineContentReportToSpamImageView == null) {
        break missingId;
      }

      id = R.id.community_attachment_layout_timeline;
      LinearLayout communityAttachmentLayoutTimeline = ViewBindings.findChildViewById(rootView, id);
      if (communityAttachmentLayoutTimeline == null) {
        break missingId;
      }

      id = R.id.content_image_layout;
      RelativeLayout contentImageLayout = ViewBindings.findChildViewById(rootView, id);
      if (contentImageLayout == null) {
        break missingId;
      }

      id = R.id.created_doc_picture;
      RoundedImageView createdDocPicture = ViewBindings.findChildViewById(rootView, id);
      if (createdDocPicture == null) {
        break missingId;
      }

      id = R.id.createdby_layout_timeline;
      LinearLayout createdbyLayoutTimeline = ViewBindings.findChildViewById(rootView, id);
      if (createdbyLayoutTimeline == null) {
        break missingId;
      }

      id = R.id.edited;
      TextView edited = ViewBindings.findChildViewById(rootView, id);
      if (edited == null) {
        break missingId;
      }

      id = R.id.edited_content;
      TextView editedContent = ViewBindings.findChildViewById(rootView, id);
      if (editedContent == null) {
        break missingId;
      }

      id = R.id.feeds_Layout;
      LinearLayout feedsLayout = ViewBindings.findChildViewById(rootView, id);
      if (feedsLayout == null) {
        break missingId;
      }

      id = R.id.if_interested_button;
      Button ifInterestedButton = ViewBindings.findChildViewById(rootView, id);
      if (ifInterestedButton == null) {
        break missingId;
      }

      id = R.id.if_interested_button_article;
      Button ifInterestedButtonArticle = ViewBindings.findChildViewById(rootView, id);
      if (ifInterestedButtonArticle == null) {
        break missingId;
      }

      id = R.id.label_attachment_name_timeline;
      TextView labelAttachmentNameTimeline = ViewBindings.findChildViewById(rootView, id);
      if (labelAttachmentNameTimeline == null) {
        break missingId;
      }

      id = R.id.label_attachment_size_timeline;
      TextView labelAttachmentSizeTimeline = ViewBindings.findChildViewById(rootView, id);
      if (labelAttachmentSizeTimeline == null) {
        break missingId;
      }

      id = R.id.message_container;
      LinearLayout messageContainer = ViewBindings.findChildViewById(rootView, id);
      if (messageContainer == null) {
        break missingId;
      }

      id = R.id.message_container1;
      LinearLayout messageContainer1 = ViewBindings.findChildViewById(rootView, id);
      if (messageContainer1 == null) {
        break missingId;
      }

      id = R.id.post_createdBy;
      TextView postCreatedBy = ViewBindings.findChildViewById(rootView, id);
      if (postCreatedBy == null) {
        break missingId;
      }

      id = R.id.post_type_article;
      TextView postTypeArticle = ViewBindings.findChildViewById(rootView, id);
      if (postTypeArticle == null) {
        break missingId;
      }

      id = R.id.post_type_community;
      TextView postTypeCommunity = ViewBindings.findChildViewById(rootView, id);
      if (postTypeCommunity == null) {
        break missingId;
      }

      id = R.id.postType_date_lay_community;
      LinearLayout postTypeDateLayCommunity = ViewBindings.findChildViewById(rootView, id);
      if (postTypeDateLayCommunity == null) {
        break missingId;
      }

      id = R.id.postType_date_lay_content;
      LinearLayout postTypeDateLayContent = ViewBindings.findChildViewById(rootView, id);
      if (postTypeDateLayContent == null) {
        break missingId;
      }

      id = R.id.survey_root_layout;
      LinearLayout surveyRootLayout = ViewBindings.findChildViewById(rootView, id);
      if (surveyRootLayout == null) {
        break missingId;
      }

      id = R.id.time_line_report_to_spam;
      LinearLayout timeLineReportToSpam = ViewBindings.findChildViewById(rootView, id);
      if (timeLineReportToSpam == null) {
        break missingId;
      }

      id = R.id.time_line_report_to_spam_ImageView;
      ImageView timeLineReportToSpamImageView = ViewBindings.findChildViewById(rootView, id);
      if (timeLineReportToSpamImageView == null) {
        break missingId;
      }

      id = R.id.timeline_comment_viewgroup;
      View timelineCommentViewgroup = ViewBindings.findChildViewById(rootView, id);
      if (timelineCommentViewgroup == null) {
        break missingId;
      }
      LatestCommentViewgroupBinding binding_timelineCommentViewgroup = LatestCommentViewgroupBinding.bind(timelineCommentViewgroup);

      id = R.id.tv_community_descpfeeds_article;
      TextView tvCommunityDescpfeedsArticle = ViewBindings.findChildViewById(rootView, id);
      if (tvCommunityDescpfeedsArticle == null) {
        break missingId;
      }

      id = R.id.tv_community_published_date;
      TextView tvCommunityPublishedDate = ViewBindings.findChildViewById(rootView, id);
      if (tvCommunityPublishedDate == null) {
        break missingId;
      }

      id = R.id.tv_feeds_descp;
      TextView tvFeedsDescp = ViewBindings.findChildViewById(rootView, id);
      if (tvFeedsDescp == null) {
        break missingId;
      }

      id = R.id.tv_feeds_title;
      TextView tvFeedsTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvFeedsTitle == null) {
        break missingId;
      }

      id = R.id.tv_for_content_desc;
      TextView tvForContentDesc = ViewBindings.findChildViewById(rootView, id);
      if (tvForContentDesc == null) {
        break missingId;
      }

      id = R.id.tv_for_content_speciality;
      TextView tvForContentSpeciality = ViewBindings.findChildViewById(rootView, id);
      if (tvForContentSpeciality == null) {
        break missingId;
      }

      id = R.id.tv_for_content_title;
      TextView tvForContentTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvForContentTitle == null) {
        break missingId;
      }

      id = R.id.webinar_icon;
      ImageView webinarIcon = ViewBindings.findChildViewById(rootView, id);
      if (webinarIcon == null) {
        break missingId;
      }

      id = R.id.webinar_lay_timeLine;
      RelativeLayout webinarLayTimeLine = ViewBindings.findChildViewById(rootView, id);
      if (webinarLayTimeLine == null) {
        break missingId;
      }

      id = R.id.webinar_status;
      TextView webinarStatus = ViewBindings.findChildViewById(rootView, id);
      if (webinarStatus == null) {
        break missingId;
      }

      id = R.id.webinar_text;
      TextView webinarText = ViewBindings.findChildViewById(rootView, id);
      if (webinarText == null) {
        break missingId;
      }

      id = R.id.webinar_time_date_lay_fullview;
      RelativeLayout webinarTimeDateLayFullview = ViewBindings.findChildViewById(rootView, id);
      if (webinarTimeDateLayFullview == null) {
        break missingId;
      }

      return new FeedsLayoutBinding((LinearLayout) rootView, blank, blank1,
          bookmarkTimelineCommunity, bookmarkTimelineCommunityImageView, bookmarkTimelineContent,
          bookmarkTimelineContentImageView, bookmarkTimelineContentReportToSpam,
          bookmarkTimelineContentReportToSpamImageView, communityAttachmentLayoutTimeline,
          contentImageLayout, createdDocPicture, createdbyLayoutTimeline, edited, editedContent,
          feedsLayout, ifInterestedButton, ifInterestedButtonArticle, labelAttachmentNameTimeline,
          labelAttachmentSizeTimeline, messageContainer, messageContainer1, postCreatedBy,
          postTypeArticle, postTypeCommunity, postTypeDateLayCommunity, postTypeDateLayContent,
          surveyRootLayout, timeLineReportToSpam, timeLineReportToSpamImageView,
          binding_timelineCommentViewgroup, tvCommunityDescpfeedsArticle, tvCommunityPublishedDate,
          tvFeedsDescp, tvFeedsTitle, tvForContentDesc, tvForContentSpeciality, tvForContentTitle,
          webinarIcon, webinarLayTimeLine, webinarStatus, webinarText, webinarTimeDateLayFullview);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
