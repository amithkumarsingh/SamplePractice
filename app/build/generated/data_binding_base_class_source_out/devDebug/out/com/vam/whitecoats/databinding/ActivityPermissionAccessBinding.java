// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vam.whitecoats.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPermissionAccessBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView allowText;

  @NonNull
  public final ImageView image;

  @NonNull
  public final TextView okAction;

  @NonNull
  public final LinearLayout okLay;

  @NonNull
  public final TextView permissionRequiredText;

  @NonNull
  public final TextView standardPermissionText;

  @NonNull
  public final TextView yourDeviceIdText;

  private ActivityPermissionAccessBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView allowText, @NonNull ImageView image, @NonNull TextView okAction,
      @NonNull LinearLayout okLay, @NonNull TextView permissionRequiredText,
      @NonNull TextView standardPermissionText, @NonNull TextView yourDeviceIdText) {
    this.rootView = rootView;
    this.allowText = allowText;
    this.image = image;
    this.okAction = okAction;
    this.okLay = okLay;
    this.permissionRequiredText = permissionRequiredText;
    this.standardPermissionText = standardPermissionText;
    this.yourDeviceIdText = yourDeviceIdText;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPermissionAccessBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPermissionAccessBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_permission_access, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPermissionAccessBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.allow_text;
      TextView allowText = ViewBindings.findChildViewById(rootView, id);
      if (allowText == null) {
        break missingId;
      }

      id = R.id.image;
      ImageView image = ViewBindings.findChildViewById(rootView, id);
      if (image == null) {
        break missingId;
      }

      id = R.id.ok_action;
      TextView okAction = ViewBindings.findChildViewById(rootView, id);
      if (okAction == null) {
        break missingId;
      }

      id = R.id.ok_lay;
      LinearLayout okLay = ViewBindings.findChildViewById(rootView, id);
      if (okLay == null) {
        break missingId;
      }

      id = R.id.permission_required_text;
      TextView permissionRequiredText = ViewBindings.findChildViewById(rootView, id);
      if (permissionRequiredText == null) {
        break missingId;
      }

      id = R.id.standard_permission_text;
      TextView standardPermissionText = ViewBindings.findChildViewById(rootView, id);
      if (standardPermissionText == null) {
        break missingId;
      }

      id = R.id.your_device_id_text;
      TextView yourDeviceIdText = ViewBindings.findChildViewById(rootView, id);
      if (yourDeviceIdText == null) {
        break missingId;
      }

      return new ActivityPermissionAccessBinding((RelativeLayout) rootView, allowText, image,
          okAction, okLay, permissionRequiredText, standardPermissionText, yourDeviceIdText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
