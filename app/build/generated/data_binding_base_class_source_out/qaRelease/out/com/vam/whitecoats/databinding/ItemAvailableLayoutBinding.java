// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vam.whitecoats.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAvailableLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView availabilityInfoTxt;

  @NonNull
  public final TextView designationTxt;

  @NonNull
  public final TextView workCityTxt;

  @NonNull
  public final TextView workPlaceTxt;

  private ItemAvailableLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull TextView availabilityInfoTxt, @NonNull TextView designationTxt,
      @NonNull TextView workCityTxt, @NonNull TextView workPlaceTxt) {
    this.rootView = rootView;
    this.availabilityInfoTxt = availabilityInfoTxt;
    this.designationTxt = designationTxt;
    this.workCityTxt = workCityTxt;
    this.workPlaceTxt = workPlaceTxt;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAvailableLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAvailableLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_available_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAvailableLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.availability_info_txt;
      TextView availabilityInfoTxt = ViewBindings.findChildViewById(rootView, id);
      if (availabilityInfoTxt == null) {
        break missingId;
      }

      id = R.id.designation_txt;
      TextView designationTxt = ViewBindings.findChildViewById(rootView, id);
      if (designationTxt == null) {
        break missingId;
      }

      id = R.id.work_city_txt;
      TextView workCityTxt = ViewBindings.findChildViewById(rootView, id);
      if (workCityTxt == null) {
        break missingId;
      }

      id = R.id.work_place_txt;
      TextView workPlaceTxt = ViewBindings.findChildViewById(rootView, id);
      if (workPlaceTxt == null) {
        break missingId;
      }

      return new ItemAvailableLayoutBinding((LinearLayout) rootView, availabilityInfoTxt,
          designationTxt, workCityTxt, workPlaceTxt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
