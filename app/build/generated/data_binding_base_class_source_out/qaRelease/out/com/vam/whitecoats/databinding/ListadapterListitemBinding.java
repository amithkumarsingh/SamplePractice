// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vam.whitecoats.R;
import com.vam.whitecoats.utils.SquareImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListadapterListitemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout deleteImageNew;

  @NonNull
  public final Button deleteImageView;

  @NonNull
  public final Button editImageView;

  @NonNull
  public final FrameLayout frameLayout;

  @NonNull
  public final SquareImageView imageView;

  @NonNull
  public final RelativeLayout overlayLayout;

  @NonNull
  public final TextView pdfFileName;

  private ListadapterListitemBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout deleteImageNew, @NonNull Button deleteImageView,
      @NonNull Button editImageView, @NonNull FrameLayout frameLayout,
      @NonNull SquareImageView imageView, @NonNull RelativeLayout overlayLayout,
      @NonNull TextView pdfFileName) {
    this.rootView = rootView;
    this.deleteImageNew = deleteImageNew;
    this.deleteImageView = deleteImageView;
    this.editImageView = editImageView;
    this.frameLayout = frameLayout;
    this.imageView = imageView;
    this.overlayLayout = overlayLayout;
    this.pdfFileName = pdfFileName;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListadapterListitemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListadapterListitemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.listadapter_listitem, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListadapterListitemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deleteImageNew;
      RelativeLayout deleteImageNew = ViewBindings.findChildViewById(rootView, id);
      if (deleteImageNew == null) {
        break missingId;
      }

      id = R.id.deleteImageView;
      Button deleteImageView = ViewBindings.findChildViewById(rootView, id);
      if (deleteImageView == null) {
        break missingId;
      }

      id = R.id.editImageView;
      Button editImageView = ViewBindings.findChildViewById(rootView, id);
      if (editImageView == null) {
        break missingId;
      }

      id = R.id.frameLayout;
      FrameLayout frameLayout = ViewBindings.findChildViewById(rootView, id);
      if (frameLayout == null) {
        break missingId;
      }

      id = R.id.imageView;
      SquareImageView imageView = ViewBindings.findChildViewById(rootView, id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.overlayLayout;
      RelativeLayout overlayLayout = ViewBindings.findChildViewById(rootView, id);
      if (overlayLayout == null) {
        break missingId;
      }

      id = R.id.pdfFileName;
      TextView pdfFileName = ViewBindings.findChildViewById(rootView, id);
      if (pdfFileName == null) {
        break missingId;
      }

      return new ListadapterListitemBinding((RelativeLayout) rootView, deleteImageNew,
          deleteImageView, editImageView, frameLayout, imageView, overlayLayout, pdfFileName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
