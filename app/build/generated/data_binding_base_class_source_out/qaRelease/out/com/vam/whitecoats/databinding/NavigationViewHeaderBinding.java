// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vam.whitecoats.R;
import com.vam.whitecoats.ui.customviews.CircularImageViewWithBorder;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class NavigationViewHeaderBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout changePasswordTv;

  @NonNull
  public final RelativeLayout headerLayout;

  @NonNull
  public final RelativeLayout help;

  @NonNull
  public final FrameLayout imageLayNav;

  @NonNull
  public final ImageView inviteIcon;

  @NonNull
  public final TextView inviteText1;

  @NonNull
  public final RelativeLayout inviteToWhiteCoats;

  @NonNull
  public final ImageView logout3;

  @NonNull
  public final RelativeLayout logoutTv;

  @NonNull
  public final RelativeLayout menuLayout;

  @NonNull
  public final RelativeLayout myBookMarks;

  @NonNull
  public final RelativeLayout myHomePreferences;

  @NonNull
  public final RelativeLayout myPostMenu;

  @NonNull
  public final RelativeLayout mySpecialityPreferences;

  @NonNull
  public final LinearLayout nameSpecLay;

  @NonNull
  public final TextView navDocName;

  @NonNull
  public final TextView navDocShareProfile;

  @NonNull
  public final TextView navDocSpec;

  @NonNull
  public final CardView noProfileImageNav;

  @NonNull
  public final TextView noProfileTextNav;

  @NonNull
  public final RelativeLayout notificationPreferences;

  @NonNull
  public final TextView privacyPolicy;

  @NonNull
  public final CircularImageViewWithBorder profileImageNav;

  @NonNull
  public final ImageView shareIcon;

  @NonNull
  public final TextView termsOfUseTv;

  @NonNull
  public final TextView versionNumTv;

  private NavigationViewHeaderBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout changePasswordTv, @NonNull RelativeLayout headerLayout,
      @NonNull RelativeLayout help, @NonNull FrameLayout imageLayNav, @NonNull ImageView inviteIcon,
      @NonNull TextView inviteText1, @NonNull RelativeLayout inviteToWhiteCoats,
      @NonNull ImageView logout3, @NonNull RelativeLayout logoutTv,
      @NonNull RelativeLayout menuLayout, @NonNull RelativeLayout myBookMarks,
      @NonNull RelativeLayout myHomePreferences, @NonNull RelativeLayout myPostMenu,
      @NonNull RelativeLayout mySpecialityPreferences, @NonNull LinearLayout nameSpecLay,
      @NonNull TextView navDocName, @NonNull TextView navDocShareProfile,
      @NonNull TextView navDocSpec, @NonNull CardView noProfileImageNav,
      @NonNull TextView noProfileTextNav, @NonNull RelativeLayout notificationPreferences,
      @NonNull TextView privacyPolicy, @NonNull CircularImageViewWithBorder profileImageNav,
      @NonNull ImageView shareIcon, @NonNull TextView termsOfUseTv,
      @NonNull TextView versionNumTv) {
    this.rootView = rootView;
    this.changePasswordTv = changePasswordTv;
    this.headerLayout = headerLayout;
    this.help = help;
    this.imageLayNav = imageLayNav;
    this.inviteIcon = inviteIcon;
    this.inviteText1 = inviteText1;
    this.inviteToWhiteCoats = inviteToWhiteCoats;
    this.logout3 = logout3;
    this.logoutTv = logoutTv;
    this.menuLayout = menuLayout;
    this.myBookMarks = myBookMarks;
    this.myHomePreferences = myHomePreferences;
    this.myPostMenu = myPostMenu;
    this.mySpecialityPreferences = mySpecialityPreferences;
    this.nameSpecLay = nameSpecLay;
    this.navDocName = navDocName;
    this.navDocShareProfile = navDocShareProfile;
    this.navDocSpec = navDocSpec;
    this.noProfileImageNav = noProfileImageNav;
    this.noProfileTextNav = noProfileTextNav;
    this.notificationPreferences = notificationPreferences;
    this.privacyPolicy = privacyPolicy;
    this.profileImageNav = profileImageNav;
    this.shareIcon = shareIcon;
    this.termsOfUseTv = termsOfUseTv;
    this.versionNumTv = versionNumTv;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static NavigationViewHeaderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static NavigationViewHeaderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.navigation_view_header, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static NavigationViewHeaderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.change_password_tv;
      RelativeLayout changePasswordTv = ViewBindings.findChildViewById(rootView, id);
      if (changePasswordTv == null) {
        break missingId;
      }

      id = R.id.headerLayout;
      RelativeLayout headerLayout = ViewBindings.findChildViewById(rootView, id);
      if (headerLayout == null) {
        break missingId;
      }

      id = R.id.help;
      RelativeLayout help = ViewBindings.findChildViewById(rootView, id);
      if (help == null) {
        break missingId;
      }

      id = R.id.image_lay_nav;
      FrameLayout imageLayNav = ViewBindings.findChildViewById(rootView, id);
      if (imageLayNav == null) {
        break missingId;
      }

      id = R.id.invite_icon;
      ImageView inviteIcon = ViewBindings.findChildViewById(rootView, id);
      if (inviteIcon == null) {
        break missingId;
      }

      id = R.id.invite_text1;
      TextView inviteText1 = ViewBindings.findChildViewById(rootView, id);
      if (inviteText1 == null) {
        break missingId;
      }

      id = R.id.inviteToWhiteCoats;
      RelativeLayout inviteToWhiteCoats = ViewBindings.findChildViewById(rootView, id);
      if (inviteToWhiteCoats == null) {
        break missingId;
      }

      id = R.id.logout3;
      ImageView logout3 = ViewBindings.findChildViewById(rootView, id);
      if (logout3 == null) {
        break missingId;
      }

      id = R.id.logout_tv;
      RelativeLayout logoutTv = ViewBindings.findChildViewById(rootView, id);
      if (logoutTv == null) {
        break missingId;
      }

      id = R.id.menuLayout;
      RelativeLayout menuLayout = ViewBindings.findChildViewById(rootView, id);
      if (menuLayout == null) {
        break missingId;
      }

      id = R.id.myBookMarks;
      RelativeLayout myBookMarks = ViewBindings.findChildViewById(rootView, id);
      if (myBookMarks == null) {
        break missingId;
      }

      id = R.id.myHomePreferences;
      RelativeLayout myHomePreferences = ViewBindings.findChildViewById(rootView, id);
      if (myHomePreferences == null) {
        break missingId;
      }

      id = R.id.myPostMenu;
      RelativeLayout myPostMenu = ViewBindings.findChildViewById(rootView, id);
      if (myPostMenu == null) {
        break missingId;
      }

      id = R.id.mySpecialityPreferences;
      RelativeLayout mySpecialityPreferences = ViewBindings.findChildViewById(rootView, id);
      if (mySpecialityPreferences == null) {
        break missingId;
      }

      id = R.id.name_spec_lay;
      LinearLayout nameSpecLay = ViewBindings.findChildViewById(rootView, id);
      if (nameSpecLay == null) {
        break missingId;
      }

      id = R.id.nav_doc_name;
      TextView navDocName = ViewBindings.findChildViewById(rootView, id);
      if (navDocName == null) {
        break missingId;
      }

      id = R.id.nav_doc_share_profile;
      TextView navDocShareProfile = ViewBindings.findChildViewById(rootView, id);
      if (navDocShareProfile == null) {
        break missingId;
      }

      id = R.id.nav_doc_spec;
      TextView navDocSpec = ViewBindings.findChildViewById(rootView, id);
      if (navDocSpec == null) {
        break missingId;
      }

      id = R.id.no_profile_image_nav;
      CardView noProfileImageNav = ViewBindings.findChildViewById(rootView, id);
      if (noProfileImageNav == null) {
        break missingId;
      }

      id = R.id.no_profile_text_nav;
      TextView noProfileTextNav = ViewBindings.findChildViewById(rootView, id);
      if (noProfileTextNav == null) {
        break missingId;
      }

      id = R.id.notificationPreferences;
      RelativeLayout notificationPreferences = ViewBindings.findChildViewById(rootView, id);
      if (notificationPreferences == null) {
        break missingId;
      }

      id = R.id.privacy_policy;
      TextView privacyPolicy = ViewBindings.findChildViewById(rootView, id);
      if (privacyPolicy == null) {
        break missingId;
      }

      id = R.id.profile_image_nav;
      CircularImageViewWithBorder profileImageNav = ViewBindings.findChildViewById(rootView, id);
      if (profileImageNav == null) {
        break missingId;
      }

      id = R.id.share_icon;
      ImageView shareIcon = ViewBindings.findChildViewById(rootView, id);
      if (shareIcon == null) {
        break missingId;
      }

      id = R.id.terms_of_use_tv;
      TextView termsOfUseTv = ViewBindings.findChildViewById(rootView, id);
      if (termsOfUseTv == null) {
        break missingId;
      }

      id = R.id.version_num_tv;
      TextView versionNumTv = ViewBindings.findChildViewById(rootView, id);
      if (versionNumTv == null) {
        break missingId;
      }

      return new NavigationViewHeaderBinding((RelativeLayout) rootView, changePasswordTv,
          headerLayout, help, imageLayNav, inviteIcon, inviteText1, inviteToWhiteCoats, logout3,
          logoutTv, menuLayout, myBookMarks, myHomePreferences, myPostMenu, mySpecialityPreferences,
          nameSpecLay, navDocName, navDocShareProfile, navDocSpec, noProfileImageNav,
          noProfileTextNav, notificationPreferences, privacyPolicy, profileImageNav, shareIcon,
          termsOfUseTv, versionNumTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
