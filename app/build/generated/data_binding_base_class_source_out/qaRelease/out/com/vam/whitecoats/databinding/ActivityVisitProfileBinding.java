// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.CollapsingToolbarLayout;
import com.vam.whitecoats.R;
import com.vam.whitecoats.ui.customviews.NonScrollListView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityVisitProfileBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final View aboutMeBorder1;

  @NonNull
  public final View aboutMeBorder2;

  @NonNull
  public final RelativeLayout aboutMeLayout;

  @NonNull
  public final TextView aboutUser;

  @NonNull
  public final TextView academicHeading;

  @NonNull
  public final RelativeLayout academicsLayout;

  @NonNull
  public final Button acceptTxt;

  @NonNull
  public final AppBarLayout appbar;

  @NonNull
  public final CollapsingToolbarLayout collapsingToolbar;

  @NonNull
  public final TextView connectToText;

  @NonNull
  public final LinearLayout contactDeatilsLayVisit;

  @NonNull
  public final ActivityInviteOverlayBinding inviteLayout;

  @NonNull
  public final CoordinatorLayout mainContent;

  @NonNull
  public final LinearLayout mainLinearLayout;

  @NonNull
  public final TextView membershipHeading;

  @NonNull
  public final RelativeLayout membershipLayout;

  @NonNull
  public final NestedScrollView nestedScroll;

  @NonNull
  public final TextView onlinePublicationsHeading;

  @NonNull
  public final Button othersInviteBtn;

  @NonNull
  public final Button othersMessageBtn;

  @NonNull
  public final TextView printPublicationsHeading;

  @NonNull
  public final TextView professionalHeading;

  @NonNull
  public final RelativeLayout professionalLayout;

  @NonNull
  public final TextView publicationsHeading;

  @NonNull
  public final LinearLayout publicationsLayout;

  @NonNull
  public final Button rejectTxt;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final Button txtAwaiting;

  @NonNull
  public final TextView userContactTextVisit;

  @NonNull
  public final TextView userEmailTextVisit;

  @NonNull
  public final TextView vBlogText;

  @NonNull
  public final TextView vFacebookText;

  @NonNull
  public final TextView vWebsiteText;

  @NonNull
  public final NonScrollListView visitOthersAcademicList;

  @NonNull
  public final NonScrollListView visitOthersMembershipList;

  @NonNull
  public final NonScrollListView visitOthersOnlineList;

  @NonNull
  public final NonScrollListView visitOthersPrintList;

  @NonNull
  public final NonScrollListView visitOthersProfessionalList;

  @NonNull
  public final TextView visitProfName;

  @NonNull
  public final ImageView visitProfPicImg;

  @NonNull
  public final TextView visitProfSpeciality;

  @NonNull
  public final TextView visitProfSubSpeciality;

  @NonNull
  public final TextView visitProfWorkplace;

  @NonNull
  public final TextView visitorAboutExpandableTextView;

  private ActivityVisitProfileBinding(@NonNull CoordinatorLayout rootView,
      @NonNull View aboutMeBorder1, @NonNull View aboutMeBorder2,
      @NonNull RelativeLayout aboutMeLayout, @NonNull TextView aboutUser,
      @NonNull TextView academicHeading, @NonNull RelativeLayout academicsLayout,
      @NonNull Button acceptTxt, @NonNull AppBarLayout appbar,
      @NonNull CollapsingToolbarLayout collapsingToolbar, @NonNull TextView connectToText,
      @NonNull LinearLayout contactDeatilsLayVisit,
      @NonNull ActivityInviteOverlayBinding inviteLayout, @NonNull CoordinatorLayout mainContent,
      @NonNull LinearLayout mainLinearLayout, @NonNull TextView membershipHeading,
      @NonNull RelativeLayout membershipLayout, @NonNull NestedScrollView nestedScroll,
      @NonNull TextView onlinePublicationsHeading, @NonNull Button othersInviteBtn,
      @NonNull Button othersMessageBtn, @NonNull TextView printPublicationsHeading,
      @NonNull TextView professionalHeading, @NonNull RelativeLayout professionalLayout,
      @NonNull TextView publicationsHeading, @NonNull LinearLayout publicationsLayout,
      @NonNull Button rejectTxt, @NonNull Toolbar toolbar, @NonNull Button txtAwaiting,
      @NonNull TextView userContactTextVisit, @NonNull TextView userEmailTextVisit,
      @NonNull TextView vBlogText, @NonNull TextView vFacebookText, @NonNull TextView vWebsiteText,
      @NonNull NonScrollListView visitOthersAcademicList,
      @NonNull NonScrollListView visitOthersMembershipList,
      @NonNull NonScrollListView visitOthersOnlineList,
      @NonNull NonScrollListView visitOthersPrintList,
      @NonNull NonScrollListView visitOthersProfessionalList, @NonNull TextView visitProfName,
      @NonNull ImageView visitProfPicImg, @NonNull TextView visitProfSpeciality,
      @NonNull TextView visitProfSubSpeciality, @NonNull TextView visitProfWorkplace,
      @NonNull TextView visitorAboutExpandableTextView) {
    this.rootView = rootView;
    this.aboutMeBorder1 = aboutMeBorder1;
    this.aboutMeBorder2 = aboutMeBorder2;
    this.aboutMeLayout = aboutMeLayout;
    this.aboutUser = aboutUser;
    this.academicHeading = academicHeading;
    this.academicsLayout = academicsLayout;
    this.acceptTxt = acceptTxt;
    this.appbar = appbar;
    this.collapsingToolbar = collapsingToolbar;
    this.connectToText = connectToText;
    this.contactDeatilsLayVisit = contactDeatilsLayVisit;
    this.inviteLayout = inviteLayout;
    this.mainContent = mainContent;
    this.mainLinearLayout = mainLinearLayout;
    this.membershipHeading = membershipHeading;
    this.membershipLayout = membershipLayout;
    this.nestedScroll = nestedScroll;
    this.onlinePublicationsHeading = onlinePublicationsHeading;
    this.othersInviteBtn = othersInviteBtn;
    this.othersMessageBtn = othersMessageBtn;
    this.printPublicationsHeading = printPublicationsHeading;
    this.professionalHeading = professionalHeading;
    this.professionalLayout = professionalLayout;
    this.publicationsHeading = publicationsHeading;
    this.publicationsLayout = publicationsLayout;
    this.rejectTxt = rejectTxt;
    this.toolbar = toolbar;
    this.txtAwaiting = txtAwaiting;
    this.userContactTextVisit = userContactTextVisit;
    this.userEmailTextVisit = userEmailTextVisit;
    this.vBlogText = vBlogText;
    this.vFacebookText = vFacebookText;
    this.vWebsiteText = vWebsiteText;
    this.visitOthersAcademicList = visitOthersAcademicList;
    this.visitOthersMembershipList = visitOthersMembershipList;
    this.visitOthersOnlineList = visitOthersOnlineList;
    this.visitOthersPrintList = visitOthersPrintList;
    this.visitOthersProfessionalList = visitOthersProfessionalList;
    this.visitProfName = visitProfName;
    this.visitProfPicImg = visitProfPicImg;
    this.visitProfSpeciality = visitProfSpeciality;
    this.visitProfSubSpeciality = visitProfSubSpeciality;
    this.visitProfWorkplace = visitProfWorkplace;
    this.visitorAboutExpandableTextView = visitorAboutExpandableTextView;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityVisitProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityVisitProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_visit_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityVisitProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.about_me_border1;
      View aboutMeBorder1 = ViewBindings.findChildViewById(rootView, id);
      if (aboutMeBorder1 == null) {
        break missingId;
      }

      id = R.id.about_me_border2;
      View aboutMeBorder2 = ViewBindings.findChildViewById(rootView, id);
      if (aboutMeBorder2 == null) {
        break missingId;
      }

      id = R.id.about_me_layout;
      RelativeLayout aboutMeLayout = ViewBindings.findChildViewById(rootView, id);
      if (aboutMeLayout == null) {
        break missingId;
      }

      id = R.id.about_user;
      TextView aboutUser = ViewBindings.findChildViewById(rootView, id);
      if (aboutUser == null) {
        break missingId;
      }

      id = R.id.academic_heading;
      TextView academicHeading = ViewBindings.findChildViewById(rootView, id);
      if (academicHeading == null) {
        break missingId;
      }

      id = R.id.academics_layout;
      RelativeLayout academicsLayout = ViewBindings.findChildViewById(rootView, id);
      if (academicsLayout == null) {
        break missingId;
      }

      id = R.id.accept_txt;
      Button acceptTxt = ViewBindings.findChildViewById(rootView, id);
      if (acceptTxt == null) {
        break missingId;
      }

      id = R.id.appbar;
      AppBarLayout appbar = ViewBindings.findChildViewById(rootView, id);
      if (appbar == null) {
        break missingId;
      }

      id = R.id.collapsing_toolbar;
      CollapsingToolbarLayout collapsingToolbar = ViewBindings.findChildViewById(rootView, id);
      if (collapsingToolbar == null) {
        break missingId;
      }

      id = R.id.connect_to_text;
      TextView connectToText = ViewBindings.findChildViewById(rootView, id);
      if (connectToText == null) {
        break missingId;
      }

      id = R.id.contact_deatils_lay_visit;
      LinearLayout contactDeatilsLayVisit = ViewBindings.findChildViewById(rootView, id);
      if (contactDeatilsLayVisit == null) {
        break missingId;
      }

      id = R.id.invite_layout;
      View inviteLayout = ViewBindings.findChildViewById(rootView, id);
      if (inviteLayout == null) {
        break missingId;
      }
      ActivityInviteOverlayBinding binding_inviteLayout = ActivityInviteOverlayBinding.bind(inviteLayout);

      CoordinatorLayout mainContent = (CoordinatorLayout) rootView;

      id = R.id.main_linear_layout;
      LinearLayout mainLinearLayout = ViewBindings.findChildViewById(rootView, id);
      if (mainLinearLayout == null) {
        break missingId;
      }

      id = R.id.membership_heading;
      TextView membershipHeading = ViewBindings.findChildViewById(rootView, id);
      if (membershipHeading == null) {
        break missingId;
      }

      id = R.id.membership_layout;
      RelativeLayout membershipLayout = ViewBindings.findChildViewById(rootView, id);
      if (membershipLayout == null) {
        break missingId;
      }

      id = R.id.nestedScroll;
      NestedScrollView nestedScroll = ViewBindings.findChildViewById(rootView, id);
      if (nestedScroll == null) {
        break missingId;
      }

      id = R.id.online_publications_heading;
      TextView onlinePublicationsHeading = ViewBindings.findChildViewById(rootView, id);
      if (onlinePublicationsHeading == null) {
        break missingId;
      }

      id = R.id.others_invite_btn;
      Button othersInviteBtn = ViewBindings.findChildViewById(rootView, id);
      if (othersInviteBtn == null) {
        break missingId;
      }

      id = R.id.others_message_btn;
      Button othersMessageBtn = ViewBindings.findChildViewById(rootView, id);
      if (othersMessageBtn == null) {
        break missingId;
      }

      id = R.id.print_publications_heading;
      TextView printPublicationsHeading = ViewBindings.findChildViewById(rootView, id);
      if (printPublicationsHeading == null) {
        break missingId;
      }

      id = R.id.professional_heading;
      TextView professionalHeading = ViewBindings.findChildViewById(rootView, id);
      if (professionalHeading == null) {
        break missingId;
      }

      id = R.id.professional_layout;
      RelativeLayout professionalLayout = ViewBindings.findChildViewById(rootView, id);
      if (professionalLayout == null) {
        break missingId;
      }

      id = R.id.publications_heading;
      TextView publicationsHeading = ViewBindings.findChildViewById(rootView, id);
      if (publicationsHeading == null) {
        break missingId;
      }

      id = R.id.publications_layout;
      LinearLayout publicationsLayout = ViewBindings.findChildViewById(rootView, id);
      if (publicationsLayout == null) {
        break missingId;
      }

      id = R.id.reject_txt;
      Button rejectTxt = ViewBindings.findChildViewById(rootView, id);
      if (rejectTxt == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.txt_awaiting;
      Button txtAwaiting = ViewBindings.findChildViewById(rootView, id);
      if (txtAwaiting == null) {
        break missingId;
      }

      id = R.id.user_contact_text_visit;
      TextView userContactTextVisit = ViewBindings.findChildViewById(rootView, id);
      if (userContactTextVisit == null) {
        break missingId;
      }

      id = R.id.user_email_text_visit;
      TextView userEmailTextVisit = ViewBindings.findChildViewById(rootView, id);
      if (userEmailTextVisit == null) {
        break missingId;
      }

      id = R.id.v_blog_text;
      TextView vBlogText = ViewBindings.findChildViewById(rootView, id);
      if (vBlogText == null) {
        break missingId;
      }

      id = R.id.v_facebook_text;
      TextView vFacebookText = ViewBindings.findChildViewById(rootView, id);
      if (vFacebookText == null) {
        break missingId;
      }

      id = R.id.v_website_text;
      TextView vWebsiteText = ViewBindings.findChildViewById(rootView, id);
      if (vWebsiteText == null) {
        break missingId;
      }

      id = R.id.visit_others_academic_list;
      NonScrollListView visitOthersAcademicList = ViewBindings.findChildViewById(rootView, id);
      if (visitOthersAcademicList == null) {
        break missingId;
      }

      id = R.id.visit_others_membership_list;
      NonScrollListView visitOthersMembershipList = ViewBindings.findChildViewById(rootView, id);
      if (visitOthersMembershipList == null) {
        break missingId;
      }

      id = R.id.visit_others_online_list;
      NonScrollListView visitOthersOnlineList = ViewBindings.findChildViewById(rootView, id);
      if (visitOthersOnlineList == null) {
        break missingId;
      }

      id = R.id.visit_others_print_list;
      NonScrollListView visitOthersPrintList = ViewBindings.findChildViewById(rootView, id);
      if (visitOthersPrintList == null) {
        break missingId;
      }

      id = R.id.visit_others_professional_list;
      NonScrollListView visitOthersProfessionalList = ViewBindings.findChildViewById(rootView, id);
      if (visitOthersProfessionalList == null) {
        break missingId;
      }

      id = R.id.visit_prof_name;
      TextView visitProfName = ViewBindings.findChildViewById(rootView, id);
      if (visitProfName == null) {
        break missingId;
      }

      id = R.id.visit_prof_pic_img;
      ImageView visitProfPicImg = ViewBindings.findChildViewById(rootView, id);
      if (visitProfPicImg == null) {
        break missingId;
      }

      id = R.id.visit_prof_speciality;
      TextView visitProfSpeciality = ViewBindings.findChildViewById(rootView, id);
      if (visitProfSpeciality == null) {
        break missingId;
      }

      id = R.id.visit_prof_sub_speciality;
      TextView visitProfSubSpeciality = ViewBindings.findChildViewById(rootView, id);
      if (visitProfSubSpeciality == null) {
        break missingId;
      }

      id = R.id.visit_prof_workplace;
      TextView visitProfWorkplace = ViewBindings.findChildViewById(rootView, id);
      if (visitProfWorkplace == null) {
        break missingId;
      }

      id = R.id.visitor_about_expandableTextView;
      TextView visitorAboutExpandableTextView = ViewBindings.findChildViewById(rootView, id);
      if (visitorAboutExpandableTextView == null) {
        break missingId;
      }

      return new ActivityVisitProfileBinding((CoordinatorLayout) rootView, aboutMeBorder1,
          aboutMeBorder2, aboutMeLayout, aboutUser, academicHeading, academicsLayout, acceptTxt,
          appbar, collapsingToolbar, connectToText, contactDeatilsLayVisit, binding_inviteLayout,
          mainContent, mainLinearLayout, membershipHeading, membershipLayout, nestedScroll,
          onlinePublicationsHeading, othersInviteBtn, othersMessageBtn, printPublicationsHeading,
          professionalHeading, professionalLayout, publicationsHeading, publicationsLayout,
          rejectTxt, toolbar, txtAwaiting, userContactTextVisit, userEmailTextVisit, vBlogText,
          vFacebookText, vWebsiteText, visitOthersAcademicList, visitOthersMembershipList,
          visitOthersOnlineList, visitOthersPrintList, visitOthersProfessionalList, visitProfName,
          visitProfPicImg, visitProfSpeciality, visitProfSubSpeciality, visitProfWorkplace,
          visitorAboutExpandableTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
