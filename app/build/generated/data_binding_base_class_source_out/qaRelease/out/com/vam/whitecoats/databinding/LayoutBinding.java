// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TabHost;
import android.widget.TabWidget;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vam.whitecoats.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout tab1;

  @NonNull
  public final LinearLayout tab2;

  @NonNull
  public final LinearLayout tab3;

  @NonNull
  public final TabHost tabHost;

  @NonNull
  public final FrameLayout tabcontent;

  @NonNull
  public final TabWidget tabs;

  private LayoutBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout tab1,
      @NonNull LinearLayout tab2, @NonNull LinearLayout tab3, @NonNull TabHost tabHost,
      @NonNull FrameLayout tabcontent, @NonNull TabWidget tabs) {
    this.rootView = rootView;
    this.tab1 = tab1;
    this.tab2 = tab2;
    this.tab3 = tab3;
    this.tabHost = tabHost;
    this.tabcontent = tabcontent;
    this.tabs = tabs;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.tab1;
      LinearLayout tab1 = ViewBindings.findChildViewById(rootView, id);
      if (tab1 == null) {
        break missingId;
      }

      id = R.id.tab2;
      LinearLayout tab2 = ViewBindings.findChildViewById(rootView, id);
      if (tab2 == null) {
        break missingId;
      }

      id = R.id.tab3;
      LinearLayout tab3 = ViewBindings.findChildViewById(rootView, id);
      if (tab3 == null) {
        break missingId;
      }

      id = R.id.tabHost;
      TabHost tabHost = ViewBindings.findChildViewById(rootView, id);
      if (tabHost == null) {
        break missingId;
      }

      id = android.R.id.tabcontent;
      FrameLayout tabcontent = ViewBindings.findChildViewById(rootView, id);
      if (tabcontent == null) {
        break missingId;
      }

      id = android.R.id.tabs;
      TabWidget tabs = ViewBindings.findChildViewById(rootView, id);
      if (tabs == null) {
        break missingId;
      }

      return new LayoutBinding((LinearLayout) rootView, tab1, tab2, tab3, tabHost, tabcontent,
          tabs);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
