// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vam.whitecoats.R;
import com.vam.whitecoats.ui.customviews.RoundedImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ChannelMainBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final View aboutMeBorder1;

  @NonNull
  public final RelativeLayout blank;

  @NonNull
  public final RelativeLayout bookmarkDashboard;

  @NonNull
  public final ImageView bookmarkDashboardImageView;

  @NonNull
  public final CardView cardView;

  @NonNull
  public final LinearLayout channelHeading;

  @NonNull
  public final TextView channelOrDocNameLabel;

  @NonNull
  public final LinearLayout createdbyLayout;

  @NonNull
  public final LatestCommentViewgroupBinding dashboardCommentViewgroup;

  @NonNull
  public final TextView docNameLabel;

  @NonNull
  public final RoundedImageView docProfilePic;

  @NonNull
  public final TextView edited;

  @NonNull
  public final Button ifInterestedButton;

  @NonNull
  public final TextView lastActionDocName;

  @NonNull
  public final RelativeLayout lastActionViewgroup;

  @NonNull
  public final TextView postDescLabel;

  @NonNull
  public final TextView postMadeTime;

  @NonNull
  public final TextView postTileLabel;

  @NonNull
  public final TextView postType;

  @NonNull
  public final RoundedImageView profileOrChannelLogo;

  @NonNull
  public final RelativeLayout spamReportDashboard;

  @NonNull
  public final ImageView spamReportDashboardImageView;

  @NonNull
  public final TextView subscribeText;

  @NonNull
  public final Button subscriptionButton;

  @NonNull
  public final ProgressBar subscriptionLoadingProgress;

  @NonNull
  public final RelativeLayout subscriptionOverLay;

  @NonNull
  public final LinearLayout surveyRootLayout;

  @NonNull
  public final RelativeLayout webinarLay;

  @NonNull
  public final RelativeLayout webinarTimeDateLay;

  private ChannelMainBinding(@NonNull LinearLayout rootView, @NonNull View aboutMeBorder1,
      @NonNull RelativeLayout blank, @NonNull RelativeLayout bookmarkDashboard,
      @NonNull ImageView bookmarkDashboardImageView, @NonNull CardView cardView,
      @NonNull LinearLayout channelHeading, @NonNull TextView channelOrDocNameLabel,
      @NonNull LinearLayout createdbyLayout,
      @NonNull LatestCommentViewgroupBinding dashboardCommentViewgroup,
      @NonNull TextView docNameLabel, @NonNull RoundedImageView docProfilePic,
      @NonNull TextView edited, @NonNull Button ifInterestedButton,
      @NonNull TextView lastActionDocName, @NonNull RelativeLayout lastActionViewgroup,
      @NonNull TextView postDescLabel, @NonNull TextView postMadeTime,
      @NonNull TextView postTileLabel, @NonNull TextView postType,
      @NonNull RoundedImageView profileOrChannelLogo, @NonNull RelativeLayout spamReportDashboard,
      @NonNull ImageView spamReportDashboardImageView, @NonNull TextView subscribeText,
      @NonNull Button subscriptionButton, @NonNull ProgressBar subscriptionLoadingProgress,
      @NonNull RelativeLayout subscriptionOverLay, @NonNull LinearLayout surveyRootLayout,
      @NonNull RelativeLayout webinarLay, @NonNull RelativeLayout webinarTimeDateLay) {
    this.rootView = rootView;
    this.aboutMeBorder1 = aboutMeBorder1;
    this.blank = blank;
    this.bookmarkDashboard = bookmarkDashboard;
    this.bookmarkDashboardImageView = bookmarkDashboardImageView;
    this.cardView = cardView;
    this.channelHeading = channelHeading;
    this.channelOrDocNameLabel = channelOrDocNameLabel;
    this.createdbyLayout = createdbyLayout;
    this.dashboardCommentViewgroup = dashboardCommentViewgroup;
    this.docNameLabel = docNameLabel;
    this.docProfilePic = docProfilePic;
    this.edited = edited;
    this.ifInterestedButton = ifInterestedButton;
    this.lastActionDocName = lastActionDocName;
    this.lastActionViewgroup = lastActionViewgroup;
    this.postDescLabel = postDescLabel;
    this.postMadeTime = postMadeTime;
    this.postTileLabel = postTileLabel;
    this.postType = postType;
    this.profileOrChannelLogo = profileOrChannelLogo;
    this.spamReportDashboard = spamReportDashboard;
    this.spamReportDashboardImageView = spamReportDashboardImageView;
    this.subscribeText = subscribeText;
    this.subscriptionButton = subscriptionButton;
    this.subscriptionLoadingProgress = subscriptionLoadingProgress;
    this.subscriptionOverLay = subscriptionOverLay;
    this.surveyRootLayout = surveyRootLayout;
    this.webinarLay = webinarLay;
    this.webinarTimeDateLay = webinarTimeDateLay;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ChannelMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ChannelMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.channel_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ChannelMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.about_me_border1;
      View aboutMeBorder1 = ViewBindings.findChildViewById(rootView, id);
      if (aboutMeBorder1 == null) {
        break missingId;
      }

      id = R.id.blank;
      RelativeLayout blank = ViewBindings.findChildViewById(rootView, id);
      if (blank == null) {
        break missingId;
      }

      id = R.id.bookmark_dashboard;
      RelativeLayout bookmarkDashboard = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkDashboard == null) {
        break missingId;
      }

      id = R.id.bookmark_dashboard_imageView;
      ImageView bookmarkDashboardImageView = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkDashboardImageView == null) {
        break missingId;
      }

      id = R.id.card_view;
      CardView cardView = ViewBindings.findChildViewById(rootView, id);
      if (cardView == null) {
        break missingId;
      }

      id = R.id.channelHeading;
      LinearLayout channelHeading = ViewBindings.findChildViewById(rootView, id);
      if (channelHeading == null) {
        break missingId;
      }

      id = R.id.channel_or_doc_name_label;
      TextView channelOrDocNameLabel = ViewBindings.findChildViewById(rootView, id);
      if (channelOrDocNameLabel == null) {
        break missingId;
      }

      id = R.id.createdby_layout;
      LinearLayout createdbyLayout = ViewBindings.findChildViewById(rootView, id);
      if (createdbyLayout == null) {
        break missingId;
      }

      id = R.id.dashboard_comment_viewgroup;
      View dashboardCommentViewgroup = ViewBindings.findChildViewById(rootView, id);
      if (dashboardCommentViewgroup == null) {
        break missingId;
      }
      LatestCommentViewgroupBinding binding_dashboardCommentViewgroup = LatestCommentViewgroupBinding.bind(dashboardCommentViewgroup);

      id = R.id.doc_name_label;
      TextView docNameLabel = ViewBindings.findChildViewById(rootView, id);
      if (docNameLabel == null) {
        break missingId;
      }

      id = R.id.doc_profile_pic;
      RoundedImageView docProfilePic = ViewBindings.findChildViewById(rootView, id);
      if (docProfilePic == null) {
        break missingId;
      }

      id = R.id.edited;
      TextView edited = ViewBindings.findChildViewById(rootView, id);
      if (edited == null) {
        break missingId;
      }

      id = R.id.if_interested_button;
      Button ifInterestedButton = ViewBindings.findChildViewById(rootView, id);
      if (ifInterestedButton == null) {
        break missingId;
      }

      id = R.id.last_action_doc_name;
      TextView lastActionDocName = ViewBindings.findChildViewById(rootView, id);
      if (lastActionDocName == null) {
        break missingId;
      }

      id = R.id.last_action_viewgroup;
      RelativeLayout lastActionViewgroup = ViewBindings.findChildViewById(rootView, id);
      if (lastActionViewgroup == null) {
        break missingId;
      }

      id = R.id.post_desc_label;
      TextView postDescLabel = ViewBindings.findChildViewById(rootView, id);
      if (postDescLabel == null) {
        break missingId;
      }

      id = R.id.post_made_time;
      TextView postMadeTime = ViewBindings.findChildViewById(rootView, id);
      if (postMadeTime == null) {
        break missingId;
      }

      id = R.id.post_tile_label;
      TextView postTileLabel = ViewBindings.findChildViewById(rootView, id);
      if (postTileLabel == null) {
        break missingId;
      }

      id = R.id.post_type;
      TextView postType = ViewBindings.findChildViewById(rootView, id);
      if (postType == null) {
        break missingId;
      }

      id = R.id.profile_or_channel_logo;
      RoundedImageView profileOrChannelLogo = ViewBindings.findChildViewById(rootView, id);
      if (profileOrChannelLogo == null) {
        break missingId;
      }

      id = R.id.spam_report_dashboard;
      RelativeLayout spamReportDashboard = ViewBindings.findChildViewById(rootView, id);
      if (spamReportDashboard == null) {
        break missingId;
      }

      id = R.id.spam_report_dashboard_imageView;
      ImageView spamReportDashboardImageView = ViewBindings.findChildViewById(rootView, id);
      if (spamReportDashboardImageView == null) {
        break missingId;
      }

      id = R.id.subscribe_text;
      TextView subscribeText = ViewBindings.findChildViewById(rootView, id);
      if (subscribeText == null) {
        break missingId;
      }

      id = R.id.subscription_button;
      Button subscriptionButton = ViewBindings.findChildViewById(rootView, id);
      if (subscriptionButton == null) {
        break missingId;
      }

      id = R.id.subscription_loading_progress;
      ProgressBar subscriptionLoadingProgress = ViewBindings.findChildViewById(rootView, id);
      if (subscriptionLoadingProgress == null) {
        break missingId;
      }

      id = R.id.subscription_overLay;
      RelativeLayout subscriptionOverLay = ViewBindings.findChildViewById(rootView, id);
      if (subscriptionOverLay == null) {
        break missingId;
      }

      id = R.id.survey_root_layout;
      LinearLayout surveyRootLayout = ViewBindings.findChildViewById(rootView, id);
      if (surveyRootLayout == null) {
        break missingId;
      }

      id = R.id.webinar_lay;
      RelativeLayout webinarLay = ViewBindings.findChildViewById(rootView, id);
      if (webinarLay == null) {
        break missingId;
      }

      id = R.id.webinar_time_date_lay;
      RelativeLayout webinarTimeDateLay = ViewBindings.findChildViewById(rootView, id);
      if (webinarTimeDateLay == null) {
        break missingId;
      }

      return new ChannelMainBinding((LinearLayout) rootView, aboutMeBorder1, blank,
          bookmarkDashboard, bookmarkDashboardImageView, cardView, channelHeading,
          channelOrDocNameLabel, createdbyLayout, binding_dashboardCommentViewgroup, docNameLabel,
          docProfilePic, edited, ifInterestedButton, lastActionDocName, lastActionViewgroup,
          postDescLabel, postMadeTime, postTileLabel, postType, profileOrChannelLogo,
          spamReportDashboard, spamReportDashboardImageView, subscribeText, subscriptionButton,
          subscriptionLoadingProgress, subscriptionOverLay, surveyRootLayout, webinarLay,
          webinarTimeDateLay);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
