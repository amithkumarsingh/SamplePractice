// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.CollapsingToolbarLayout;
import com.vam.whitecoats.R;
import com.vam.whitecoats.utils.ControllableAppBarLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityVisitOtherProfileBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final RelativeLayout aboutMeLayout;

  @NonNull
  public final RelativeLayout academicsLayout;

  @NonNull
  public final LinearLayout acceptRejectLay;

  @NonNull
  public final Button acceptTxt;

  @NonNull
  public final ControllableAppBarLayout appbar;

  @NonNull
  public final RelativeLayout areaLayout;

  @NonNull
  public final RelativeLayout availableLayout;

  @NonNull
  public final CollapsingToolbarLayout collapsingToolbar;

  @NonNull
  public final NestedScrollView contentScrollView;

  @NonNull
  public final RelativeLayout eventLayout;

  @NonNull
  public final ImageView experienceIcon;

  @NonNull
  public final RelativeLayout experienceLay;

  @NonNull
  public final CoordinatorLayout mainContent;

  @NonNull
  public final RelativeLayout membershipLayout;

  @NonNull
  public final Button othersInviteBtn;

  @NonNull
  public final Button othersMessageBtn;

  @NonNull
  public final RelativeLayout professionalLayout;

  @NonNull
  public final LinearLayout publicationsLayout;

  @NonNull
  public final Button rejectTxt;

  @NonNull
  public final LinearLayout ribbonCountLayout;

  @NonNull
  public final View separator1;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final Button txtAwaiting;

  @NonNull
  public final LinearLayout userActivityCountLayout;

  @NonNull
  public final TextView userConnectCountText;

  @NonNull
  public final LinearLayout userConnectCountTextLay;

  @NonNull
  public final Button userFollowRadioButton;

  @NonNull
  public final TextView userFollowersCountText;

  @NonNull
  public final LinearLayout userFollowersCountTextLay;

  @NonNull
  public final TextView userFollowingCountText;

  @NonNull
  public final LinearLayout userFollowingCountTextLay;

  @NonNull
  public final TextView userPostCountText;

  @NonNull
  public final LinearLayout userPostCountTextLay;

  @NonNull
  public final TextView visitConnectCount;

  @NonNull
  public final TextView visitFollowersCount;

  @NonNull
  public final TextView visitFollowingCount;

  @NonNull
  public final TextView visitOverAllExperience;

  @NonNull
  public final TextView visitPostCount;

  @NonNull
  public final TextView visitProfName;

  @NonNull
  public final ImageView visitProfPicImg;

  @NonNull
  public final TextView visitProfSpeciality;

  @NonNull
  public final TextView visitProfSubSpeciality;

  @NonNull
  public final TextView visitProfWorkplace;

  @NonNull
  public final LinearLayout visitSpecificAskLayout;

  @NonNull
  public final TextView visitSpecificAskText;

  @NonNull
  public final TextView visitUspText;

  private ActivityVisitOtherProfileBinding(@NonNull CoordinatorLayout rootView,
      @NonNull RelativeLayout aboutMeLayout, @NonNull RelativeLayout academicsLayout,
      @NonNull LinearLayout acceptRejectLay, @NonNull Button acceptTxt,
      @NonNull ControllableAppBarLayout appbar, @NonNull RelativeLayout areaLayout,
      @NonNull RelativeLayout availableLayout, @NonNull CollapsingToolbarLayout collapsingToolbar,
      @NonNull NestedScrollView contentScrollView, @NonNull RelativeLayout eventLayout,
      @NonNull ImageView experienceIcon, @NonNull RelativeLayout experienceLay,
      @NonNull CoordinatorLayout mainContent, @NonNull RelativeLayout membershipLayout,
      @NonNull Button othersInviteBtn, @NonNull Button othersMessageBtn,
      @NonNull RelativeLayout professionalLayout, @NonNull LinearLayout publicationsLayout,
      @NonNull Button rejectTxt, @NonNull LinearLayout ribbonCountLayout, @NonNull View separator1,
      @NonNull Toolbar toolbar, @NonNull Button txtAwaiting,
      @NonNull LinearLayout userActivityCountLayout, @NonNull TextView userConnectCountText,
      @NonNull LinearLayout userConnectCountTextLay, @NonNull Button userFollowRadioButton,
      @NonNull TextView userFollowersCountText, @NonNull LinearLayout userFollowersCountTextLay,
      @NonNull TextView userFollowingCountText, @NonNull LinearLayout userFollowingCountTextLay,
      @NonNull TextView userPostCountText, @NonNull LinearLayout userPostCountTextLay,
      @NonNull TextView visitConnectCount, @NonNull TextView visitFollowersCount,
      @NonNull TextView visitFollowingCount, @NonNull TextView visitOverAllExperience,
      @NonNull TextView visitPostCount, @NonNull TextView visitProfName,
      @NonNull ImageView visitProfPicImg, @NonNull TextView visitProfSpeciality,
      @NonNull TextView visitProfSubSpeciality, @NonNull TextView visitProfWorkplace,
      @NonNull LinearLayout visitSpecificAskLayout, @NonNull TextView visitSpecificAskText,
      @NonNull TextView visitUspText) {
    this.rootView = rootView;
    this.aboutMeLayout = aboutMeLayout;
    this.academicsLayout = academicsLayout;
    this.acceptRejectLay = acceptRejectLay;
    this.acceptTxt = acceptTxt;
    this.appbar = appbar;
    this.areaLayout = areaLayout;
    this.availableLayout = availableLayout;
    this.collapsingToolbar = collapsingToolbar;
    this.contentScrollView = contentScrollView;
    this.eventLayout = eventLayout;
    this.experienceIcon = experienceIcon;
    this.experienceLay = experienceLay;
    this.mainContent = mainContent;
    this.membershipLayout = membershipLayout;
    this.othersInviteBtn = othersInviteBtn;
    this.othersMessageBtn = othersMessageBtn;
    this.professionalLayout = professionalLayout;
    this.publicationsLayout = publicationsLayout;
    this.rejectTxt = rejectTxt;
    this.ribbonCountLayout = ribbonCountLayout;
    this.separator1 = separator1;
    this.toolbar = toolbar;
    this.txtAwaiting = txtAwaiting;
    this.userActivityCountLayout = userActivityCountLayout;
    this.userConnectCountText = userConnectCountText;
    this.userConnectCountTextLay = userConnectCountTextLay;
    this.userFollowRadioButton = userFollowRadioButton;
    this.userFollowersCountText = userFollowersCountText;
    this.userFollowersCountTextLay = userFollowersCountTextLay;
    this.userFollowingCountText = userFollowingCountText;
    this.userFollowingCountTextLay = userFollowingCountTextLay;
    this.userPostCountText = userPostCountText;
    this.userPostCountTextLay = userPostCountTextLay;
    this.visitConnectCount = visitConnectCount;
    this.visitFollowersCount = visitFollowersCount;
    this.visitFollowingCount = visitFollowingCount;
    this.visitOverAllExperience = visitOverAllExperience;
    this.visitPostCount = visitPostCount;
    this.visitProfName = visitProfName;
    this.visitProfPicImg = visitProfPicImg;
    this.visitProfSpeciality = visitProfSpeciality;
    this.visitProfSubSpeciality = visitProfSubSpeciality;
    this.visitProfWorkplace = visitProfWorkplace;
    this.visitSpecificAskLayout = visitSpecificAskLayout;
    this.visitSpecificAskText = visitSpecificAskText;
    this.visitUspText = visitUspText;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityVisitOtherProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityVisitOtherProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_visit_other_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityVisitOtherProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.about_me_layout;
      RelativeLayout aboutMeLayout = ViewBindings.findChildViewById(rootView, id);
      if (aboutMeLayout == null) {
        break missingId;
      }

      id = R.id.academics_layout;
      RelativeLayout academicsLayout = ViewBindings.findChildViewById(rootView, id);
      if (academicsLayout == null) {
        break missingId;
      }

      id = R.id.accept_reject_lay;
      LinearLayout acceptRejectLay = ViewBindings.findChildViewById(rootView, id);
      if (acceptRejectLay == null) {
        break missingId;
      }

      id = R.id.accept_txt;
      Button acceptTxt = ViewBindings.findChildViewById(rootView, id);
      if (acceptTxt == null) {
        break missingId;
      }

      id = R.id.appbar;
      ControllableAppBarLayout appbar = ViewBindings.findChildViewById(rootView, id);
      if (appbar == null) {
        break missingId;
      }

      id = R.id.area_layout;
      RelativeLayout areaLayout = ViewBindings.findChildViewById(rootView, id);
      if (areaLayout == null) {
        break missingId;
      }

      id = R.id.available_layout;
      RelativeLayout availableLayout = ViewBindings.findChildViewById(rootView, id);
      if (availableLayout == null) {
        break missingId;
      }

      id = R.id.collapsing_toolbar;
      CollapsingToolbarLayout collapsingToolbar = ViewBindings.findChildViewById(rootView, id);
      if (collapsingToolbar == null) {
        break missingId;
      }

      id = R.id.contentScrollView;
      NestedScrollView contentScrollView = ViewBindings.findChildViewById(rootView, id);
      if (contentScrollView == null) {
        break missingId;
      }

      id = R.id.event_layout;
      RelativeLayout eventLayout = ViewBindings.findChildViewById(rootView, id);
      if (eventLayout == null) {
        break missingId;
      }

      id = R.id.experience_icon;
      ImageView experienceIcon = ViewBindings.findChildViewById(rootView, id);
      if (experienceIcon == null) {
        break missingId;
      }

      id = R.id.experience_lay;
      RelativeLayout experienceLay = ViewBindings.findChildViewById(rootView, id);
      if (experienceLay == null) {
        break missingId;
      }

      CoordinatorLayout mainContent = (CoordinatorLayout) rootView;

      id = R.id.membership_layout;
      RelativeLayout membershipLayout = ViewBindings.findChildViewById(rootView, id);
      if (membershipLayout == null) {
        break missingId;
      }

      id = R.id.others_invite_btn;
      Button othersInviteBtn = ViewBindings.findChildViewById(rootView, id);
      if (othersInviteBtn == null) {
        break missingId;
      }

      id = R.id.others_message_btn;
      Button othersMessageBtn = ViewBindings.findChildViewById(rootView, id);
      if (othersMessageBtn == null) {
        break missingId;
      }

      id = R.id.professional_layout;
      RelativeLayout professionalLayout = ViewBindings.findChildViewById(rootView, id);
      if (professionalLayout == null) {
        break missingId;
      }

      id = R.id.publications_layout;
      LinearLayout publicationsLayout = ViewBindings.findChildViewById(rootView, id);
      if (publicationsLayout == null) {
        break missingId;
      }

      id = R.id.reject_txt;
      Button rejectTxt = ViewBindings.findChildViewById(rootView, id);
      if (rejectTxt == null) {
        break missingId;
      }

      id = R.id.ribbonCountLayout;
      LinearLayout ribbonCountLayout = ViewBindings.findChildViewById(rootView, id);
      if (ribbonCountLayout == null) {
        break missingId;
      }

      id = R.id.separator1;
      View separator1 = ViewBindings.findChildViewById(rootView, id);
      if (separator1 == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.txt_awaiting;
      Button txtAwaiting = ViewBindings.findChildViewById(rootView, id);
      if (txtAwaiting == null) {
        break missingId;
      }

      id = R.id.user_activity_count_layout;
      LinearLayout userActivityCountLayout = ViewBindings.findChildViewById(rootView, id);
      if (userActivityCountLayout == null) {
        break missingId;
      }

      id = R.id.user_connect_count_text;
      TextView userConnectCountText = ViewBindings.findChildViewById(rootView, id);
      if (userConnectCountText == null) {
        break missingId;
      }

      id = R.id.user_connect_count_text_lay;
      LinearLayout userConnectCountTextLay = ViewBindings.findChildViewById(rootView, id);
      if (userConnectCountTextLay == null) {
        break missingId;
      }

      id = R.id.user_follow_radio_button;
      Button userFollowRadioButton = ViewBindings.findChildViewById(rootView, id);
      if (userFollowRadioButton == null) {
        break missingId;
      }

      id = R.id.user_followers_count_text;
      TextView userFollowersCountText = ViewBindings.findChildViewById(rootView, id);
      if (userFollowersCountText == null) {
        break missingId;
      }

      id = R.id.user_followers_count_text_lay;
      LinearLayout userFollowersCountTextLay = ViewBindings.findChildViewById(rootView, id);
      if (userFollowersCountTextLay == null) {
        break missingId;
      }

      id = R.id.user_following_count_text;
      TextView userFollowingCountText = ViewBindings.findChildViewById(rootView, id);
      if (userFollowingCountText == null) {
        break missingId;
      }

      id = R.id.user_following_count_text_lay;
      LinearLayout userFollowingCountTextLay = ViewBindings.findChildViewById(rootView, id);
      if (userFollowingCountTextLay == null) {
        break missingId;
      }

      id = R.id.user_post_count_text;
      TextView userPostCountText = ViewBindings.findChildViewById(rootView, id);
      if (userPostCountText == null) {
        break missingId;
      }

      id = R.id.user_post_count_text_lay;
      LinearLayout userPostCountTextLay = ViewBindings.findChildViewById(rootView, id);
      if (userPostCountTextLay == null) {
        break missingId;
      }

      id = R.id.visit_connect_count;
      TextView visitConnectCount = ViewBindings.findChildViewById(rootView, id);
      if (visitConnectCount == null) {
        break missingId;
      }

      id = R.id.visit_followers_count;
      TextView visitFollowersCount = ViewBindings.findChildViewById(rootView, id);
      if (visitFollowersCount == null) {
        break missingId;
      }

      id = R.id.visit_following_count;
      TextView visitFollowingCount = ViewBindings.findChildViewById(rootView, id);
      if (visitFollowingCount == null) {
        break missingId;
      }

      id = R.id.visit_over_all_experience;
      TextView visitOverAllExperience = ViewBindings.findChildViewById(rootView, id);
      if (visitOverAllExperience == null) {
        break missingId;
      }

      id = R.id.visit_post_count;
      TextView visitPostCount = ViewBindings.findChildViewById(rootView, id);
      if (visitPostCount == null) {
        break missingId;
      }

      id = R.id.visit_prof_name;
      TextView visitProfName = ViewBindings.findChildViewById(rootView, id);
      if (visitProfName == null) {
        break missingId;
      }

      id = R.id.visit_prof_pic_img;
      ImageView visitProfPicImg = ViewBindings.findChildViewById(rootView, id);
      if (visitProfPicImg == null) {
        break missingId;
      }

      id = R.id.visit_prof_speciality;
      TextView visitProfSpeciality = ViewBindings.findChildViewById(rootView, id);
      if (visitProfSpeciality == null) {
        break missingId;
      }

      id = R.id.visit_prof_sub_speciality;
      TextView visitProfSubSpeciality = ViewBindings.findChildViewById(rootView, id);
      if (visitProfSubSpeciality == null) {
        break missingId;
      }

      id = R.id.visit_prof_workplace;
      TextView visitProfWorkplace = ViewBindings.findChildViewById(rootView, id);
      if (visitProfWorkplace == null) {
        break missingId;
      }

      id = R.id.visit_specific_ask_layout;
      LinearLayout visitSpecificAskLayout = ViewBindings.findChildViewById(rootView, id);
      if (visitSpecificAskLayout == null) {
        break missingId;
      }

      id = R.id.visit_specific_ask_text;
      TextView visitSpecificAskText = ViewBindings.findChildViewById(rootView, id);
      if (visitSpecificAskText == null) {
        break missingId;
      }

      id = R.id.visit_usp_text;
      TextView visitUspText = ViewBindings.findChildViewById(rootView, id);
      if (visitUspText == null) {
        break missingId;
      }

      return new ActivityVisitOtherProfileBinding((CoordinatorLayout) rootView, aboutMeLayout,
          academicsLayout, acceptRejectLay, acceptTxt, appbar, areaLayout, availableLayout,
          collapsingToolbar, contentScrollView, eventLayout, experienceIcon, experienceLay,
          mainContent, membershipLayout, othersInviteBtn, othersMessageBtn, professionalLayout,
          publicationsLayout, rejectTxt, ribbonCountLayout, separator1, toolbar, txtAwaiting,
          userActivityCountLayout, userConnectCountText, userConnectCountTextLay,
          userFollowRadioButton, userFollowersCountText, userFollowersCountTextLay,
          userFollowingCountText, userFollowingCountTextLay, userPostCountText,
          userPostCountTextLay, visitConnectCount, visitFollowersCount, visitFollowingCount,
          visitOverAllExperience, visitPostCount, visitProfName, visitProfPicImg,
          visitProfSpeciality, visitProfSubSpeciality, visitProfWorkplace, visitSpecificAskLayout,
          visitSpecificAskText, visitUspText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
