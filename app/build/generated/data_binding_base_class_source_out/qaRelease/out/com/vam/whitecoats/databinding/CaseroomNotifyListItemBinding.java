// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vam.whitecoats.R;
import com.vam.whitecoats.ui.customviews.RoundedImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CaseroomNotifyListItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RoundedImageView caseroomAdminImage;

  @NonNull
  public final TextView caseroomAdminName;

  @NonNull
  public final TextView caseroomAdminSpeciality;

  @NonNull
  public final TextView caseroomSpecialty;

  @NonNull
  public final TextView caseroomTime;

  @NonNull
  public final TextView caseroomTitle;

  @NonNull
  public final TextView caseroomViewCaseSummary;

  @NonNull
  public final TextView createdby;

  @NonNull
  public final ImageView notifyCaseroomAcceptIg;

  @NonNull
  public final ImageView notifyCaseroomRejectIg;

  @NonNull
  public final RelativeLayout reNotify;

  private CaseroomNotifyListItemBinding(@NonNull LinearLayout rootView,
      @NonNull RoundedImageView caseroomAdminImage, @NonNull TextView caseroomAdminName,
      @NonNull TextView caseroomAdminSpeciality, @NonNull TextView caseroomSpecialty,
      @NonNull TextView caseroomTime, @NonNull TextView caseroomTitle,
      @NonNull TextView caseroomViewCaseSummary, @NonNull TextView createdby,
      @NonNull ImageView notifyCaseroomAcceptIg, @NonNull ImageView notifyCaseroomRejectIg,
      @NonNull RelativeLayout reNotify) {
    this.rootView = rootView;
    this.caseroomAdminImage = caseroomAdminImage;
    this.caseroomAdminName = caseroomAdminName;
    this.caseroomAdminSpeciality = caseroomAdminSpeciality;
    this.caseroomSpecialty = caseroomSpecialty;
    this.caseroomTime = caseroomTime;
    this.caseroomTitle = caseroomTitle;
    this.caseroomViewCaseSummary = caseroomViewCaseSummary;
    this.createdby = createdby;
    this.notifyCaseroomAcceptIg = notifyCaseroomAcceptIg;
    this.notifyCaseroomRejectIg = notifyCaseroomRejectIg;
    this.reNotify = reNotify;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CaseroomNotifyListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CaseroomNotifyListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.caseroom_notify_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CaseroomNotifyListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.caseroom_admin_image;
      RoundedImageView caseroomAdminImage = ViewBindings.findChildViewById(rootView, id);
      if (caseroomAdminImage == null) {
        break missingId;
      }

      id = R.id.caseroom_admin_name;
      TextView caseroomAdminName = ViewBindings.findChildViewById(rootView, id);
      if (caseroomAdminName == null) {
        break missingId;
      }

      id = R.id.caseroom_admin_speciality;
      TextView caseroomAdminSpeciality = ViewBindings.findChildViewById(rootView, id);
      if (caseroomAdminSpeciality == null) {
        break missingId;
      }

      id = R.id.caseroom_specialty;
      TextView caseroomSpecialty = ViewBindings.findChildViewById(rootView, id);
      if (caseroomSpecialty == null) {
        break missingId;
      }

      id = R.id.caseroom_time;
      TextView caseroomTime = ViewBindings.findChildViewById(rootView, id);
      if (caseroomTime == null) {
        break missingId;
      }

      id = R.id.caseroom_title;
      TextView caseroomTitle = ViewBindings.findChildViewById(rootView, id);
      if (caseroomTitle == null) {
        break missingId;
      }

      id = R.id.caseroom_view_case_summary;
      TextView caseroomViewCaseSummary = ViewBindings.findChildViewById(rootView, id);
      if (caseroomViewCaseSummary == null) {
        break missingId;
      }

      id = R.id.createdby;
      TextView createdby = ViewBindings.findChildViewById(rootView, id);
      if (createdby == null) {
        break missingId;
      }

      id = R.id.notify_caseroom_accept_ig;
      ImageView notifyCaseroomAcceptIg = ViewBindings.findChildViewById(rootView, id);
      if (notifyCaseroomAcceptIg == null) {
        break missingId;
      }

      id = R.id.notify_caseroom_reject_ig;
      ImageView notifyCaseroomRejectIg = ViewBindings.findChildViewById(rootView, id);
      if (notifyCaseroomRejectIg == null) {
        break missingId;
      }

      id = R.id.re_notify;
      RelativeLayout reNotify = ViewBindings.findChildViewById(rootView, id);
      if (reNotify == null) {
        break missingId;
      }

      return new CaseroomNotifyListItemBinding((LinearLayout) rootView, caseroomAdminImage,
          caseroomAdminName, caseroomAdminSpeciality, caseroomSpecialty, caseroomTime,
          caseroomTitle, caseroomViewCaseSummary, createdby, notifyCaseroomAcceptIg,
          notifyCaseroomRejectIg, reNotify);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
