// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vam.whitecoats.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class WebinarDashbordLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView webinarDesc;

  @NonNull
  public final ImageView webinarIcon;

  @NonNull
  public final RelativeLayout webinarMainLay;

  @NonNull
  public final TextView webinarStatus;

  @NonNull
  public final TextView webinarText;

  @NonNull
  public final TextView webinarTitle;

  private WebinarDashbordLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull TextView webinarDesc, @NonNull ImageView webinarIcon,
      @NonNull RelativeLayout webinarMainLay, @NonNull TextView webinarStatus,
      @NonNull TextView webinarText, @NonNull TextView webinarTitle) {
    this.rootView = rootView;
    this.webinarDesc = webinarDesc;
    this.webinarIcon = webinarIcon;
    this.webinarMainLay = webinarMainLay;
    this.webinarStatus = webinarStatus;
    this.webinarText = webinarText;
    this.webinarTitle = webinarTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static WebinarDashbordLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static WebinarDashbordLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.webinar_dashbord_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static WebinarDashbordLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.webinar_desc;
      TextView webinarDesc = ViewBindings.findChildViewById(rootView, id);
      if (webinarDesc == null) {
        break missingId;
      }

      id = R.id.webinar_icon;
      ImageView webinarIcon = ViewBindings.findChildViewById(rootView, id);
      if (webinarIcon == null) {
        break missingId;
      }

      id = R.id.webinar_main_lay;
      RelativeLayout webinarMainLay = ViewBindings.findChildViewById(rootView, id);
      if (webinarMainLay == null) {
        break missingId;
      }

      id = R.id.webinar_status;
      TextView webinarStatus = ViewBindings.findChildViewById(rootView, id);
      if (webinarStatus == null) {
        break missingId;
      }

      id = R.id.webinar_text;
      TextView webinarText = ViewBindings.findChildViewById(rootView, id);
      if (webinarText == null) {
        break missingId;
      }

      id = R.id.webinar_title;
      TextView webinarTitle = ViewBindings.findChildViewById(rootView, id);
      if (webinarTitle == null) {
        break missingId;
      }

      return new WebinarDashbordLayoutBinding((LinearLayout) rootView, webinarDesc, webinarIcon,
          webinarMainLay, webinarStatus, webinarText, webinarTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
