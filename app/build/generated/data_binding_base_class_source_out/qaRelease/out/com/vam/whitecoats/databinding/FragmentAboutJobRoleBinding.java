// Generated by view binder compiler. Do not edit!
package com.vam.whitecoats.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TableRow;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vam.whitecoats.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAboutJobRoleBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TableRow compensationRow;

  @NonNull
  public final LinearLayout contentAboutLayout;

  @NonNull
  public final TableRow deadlineRow;

  @NonNull
  public final TableRow expRow;

  @NonNull
  public final TableRow focusAreaRow;

  @NonNull
  public final TableRow locationRow;

  @NonNull
  public final TableRow orgRow;

  @NonNull
  public final TableRow qualificationRow;

  @NonNull
  public final TableRow roleRow;

  @NonNull
  public final TableRow specializationRow;

  @NonNull
  public final TableRow tileRow;

  @NonNull
  public final TextView tvCompensation;

  @NonNull
  public final TextView tvCriteria1;

  @NonNull
  public final TextView tvCriteria2;

  @NonNull
  public final TextView tvCriteria3;

  @NonNull
  public final TextView tvDeadline;

  @NonNull
  public final TextView tvExperience;

  @NonNull
  public final TextView tvFocusAreas;

  @NonNull
  public final TextView tvJobDescTop;

  @NonNull
  public final TextView tvJobLocation;

  @NonNull
  public final TextView tvJobRole;

  @NonNull
  public final TextView tvJobTitle;

  @NonNull
  public final TextView tvOrganization;

  @NonNull
  public final TextView tvOtherRequirement;

  @NonNull
  public final TextView tvQualification;

  @NonNull
  public final TextView tvSpecialization;

  private FragmentAboutJobRoleBinding(@NonNull ScrollView rootView,
      @NonNull TableRow compensationRow, @NonNull LinearLayout contentAboutLayout,
      @NonNull TableRow deadlineRow, @NonNull TableRow expRow, @NonNull TableRow focusAreaRow,
      @NonNull TableRow locationRow, @NonNull TableRow orgRow, @NonNull TableRow qualificationRow,
      @NonNull TableRow roleRow, @NonNull TableRow specializationRow, @NonNull TableRow tileRow,
      @NonNull TextView tvCompensation, @NonNull TextView tvCriteria1,
      @NonNull TextView tvCriteria2, @NonNull TextView tvCriteria3, @NonNull TextView tvDeadline,
      @NonNull TextView tvExperience, @NonNull TextView tvFocusAreas,
      @NonNull TextView tvJobDescTop, @NonNull TextView tvJobLocation, @NonNull TextView tvJobRole,
      @NonNull TextView tvJobTitle, @NonNull TextView tvOrganization,
      @NonNull TextView tvOtherRequirement, @NonNull TextView tvQualification,
      @NonNull TextView tvSpecialization) {
    this.rootView = rootView;
    this.compensationRow = compensationRow;
    this.contentAboutLayout = contentAboutLayout;
    this.deadlineRow = deadlineRow;
    this.expRow = expRow;
    this.focusAreaRow = focusAreaRow;
    this.locationRow = locationRow;
    this.orgRow = orgRow;
    this.qualificationRow = qualificationRow;
    this.roleRow = roleRow;
    this.specializationRow = specializationRow;
    this.tileRow = tileRow;
    this.tvCompensation = tvCompensation;
    this.tvCriteria1 = tvCriteria1;
    this.tvCriteria2 = tvCriteria2;
    this.tvCriteria3 = tvCriteria3;
    this.tvDeadline = tvDeadline;
    this.tvExperience = tvExperience;
    this.tvFocusAreas = tvFocusAreas;
    this.tvJobDescTop = tvJobDescTop;
    this.tvJobLocation = tvJobLocation;
    this.tvJobRole = tvJobRole;
    this.tvJobTitle = tvJobTitle;
    this.tvOrganization = tvOrganization;
    this.tvOtherRequirement = tvOtherRequirement;
    this.tvQualification = tvQualification;
    this.tvSpecialization = tvSpecialization;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAboutJobRoleBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAboutJobRoleBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_about_job_role, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAboutJobRoleBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.compensation_row;
      TableRow compensationRow = ViewBindings.findChildViewById(rootView, id);
      if (compensationRow == null) {
        break missingId;
      }

      id = R.id.content_about_layout;
      LinearLayout contentAboutLayout = ViewBindings.findChildViewById(rootView, id);
      if (contentAboutLayout == null) {
        break missingId;
      }

      id = R.id.deadline_row;
      TableRow deadlineRow = ViewBindings.findChildViewById(rootView, id);
      if (deadlineRow == null) {
        break missingId;
      }

      id = R.id.exp_row;
      TableRow expRow = ViewBindings.findChildViewById(rootView, id);
      if (expRow == null) {
        break missingId;
      }

      id = R.id.focus_area_row;
      TableRow focusAreaRow = ViewBindings.findChildViewById(rootView, id);
      if (focusAreaRow == null) {
        break missingId;
      }

      id = R.id.location_row;
      TableRow locationRow = ViewBindings.findChildViewById(rootView, id);
      if (locationRow == null) {
        break missingId;
      }

      id = R.id.org_row;
      TableRow orgRow = ViewBindings.findChildViewById(rootView, id);
      if (orgRow == null) {
        break missingId;
      }

      id = R.id.qualification_row;
      TableRow qualificationRow = ViewBindings.findChildViewById(rootView, id);
      if (qualificationRow == null) {
        break missingId;
      }

      id = R.id.role_row;
      TableRow roleRow = ViewBindings.findChildViewById(rootView, id);
      if (roleRow == null) {
        break missingId;
      }

      id = R.id.specialization_row;
      TableRow specializationRow = ViewBindings.findChildViewById(rootView, id);
      if (specializationRow == null) {
        break missingId;
      }

      id = R.id.tile_row;
      TableRow tileRow = ViewBindings.findChildViewById(rootView, id);
      if (tileRow == null) {
        break missingId;
      }

      id = R.id.tv_compensation;
      TextView tvCompensation = ViewBindings.findChildViewById(rootView, id);
      if (tvCompensation == null) {
        break missingId;
      }

      id = R.id.tv_criteria_1;
      TextView tvCriteria1 = ViewBindings.findChildViewById(rootView, id);
      if (tvCriteria1 == null) {
        break missingId;
      }

      id = R.id.tv_criteria_2;
      TextView tvCriteria2 = ViewBindings.findChildViewById(rootView, id);
      if (tvCriteria2 == null) {
        break missingId;
      }

      id = R.id.tv_criteria_3;
      TextView tvCriteria3 = ViewBindings.findChildViewById(rootView, id);
      if (tvCriteria3 == null) {
        break missingId;
      }

      id = R.id.tv_deadline;
      TextView tvDeadline = ViewBindings.findChildViewById(rootView, id);
      if (tvDeadline == null) {
        break missingId;
      }

      id = R.id.tv_experience;
      TextView tvExperience = ViewBindings.findChildViewById(rootView, id);
      if (tvExperience == null) {
        break missingId;
      }

      id = R.id.tv_focus_areas;
      TextView tvFocusAreas = ViewBindings.findChildViewById(rootView, id);
      if (tvFocusAreas == null) {
        break missingId;
      }

      id = R.id.tv_job_desc_top;
      TextView tvJobDescTop = ViewBindings.findChildViewById(rootView, id);
      if (tvJobDescTop == null) {
        break missingId;
      }

      id = R.id.tv_job_location;
      TextView tvJobLocation = ViewBindings.findChildViewById(rootView, id);
      if (tvJobLocation == null) {
        break missingId;
      }

      id = R.id.tv_job_role;
      TextView tvJobRole = ViewBindings.findChildViewById(rootView, id);
      if (tvJobRole == null) {
        break missingId;
      }

      id = R.id.tv_job_title;
      TextView tvJobTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvJobTitle == null) {
        break missingId;
      }

      id = R.id.tv_organization;
      TextView tvOrganization = ViewBindings.findChildViewById(rootView, id);
      if (tvOrganization == null) {
        break missingId;
      }

      id = R.id.tv_other_requirement;
      TextView tvOtherRequirement = ViewBindings.findChildViewById(rootView, id);
      if (tvOtherRequirement == null) {
        break missingId;
      }

      id = R.id.tv_qualification;
      TextView tvQualification = ViewBindings.findChildViewById(rootView, id);
      if (tvQualification == null) {
        break missingId;
      }

      id = R.id.tv_specialization;
      TextView tvSpecialization = ViewBindings.findChildViewById(rootView, id);
      if (tvSpecialization == null) {
        break missingId;
      }

      return new FragmentAboutJobRoleBinding((ScrollView) rootView, compensationRow,
          contentAboutLayout, deadlineRow, expRow, focusAreaRow, locationRow, orgRow,
          qualificationRow, roleRow, specializationRow, tileRow, tvCompensation, tvCriteria1,
          tvCriteria2, tvCriteria3, tvDeadline, tvExperience, tvFocusAreas, tvJobDescTop,
          tvJobLocation, tvJobRole, tvJobTitle, tvOrganization, tvOtherRequirement, tvQualification,
          tvSpecialization);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
